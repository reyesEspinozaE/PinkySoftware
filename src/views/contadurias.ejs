<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>
        <%= title %>
    </title>
    <!-- Uso de sweetalert2 -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
    <!-- Uso de Font awesone -->
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.12.1/css/all.css" crossorigin="anonymous">
    <%- include("partials/head") %>
        <%- include('partials/navigation.ejs') %>
</head>

<body>
    <main>
        <div id="container" class="container mt-5">
            <div class="row">
                <!-- Presupuestos -->
                <div class="col-md-6">
                    <div id="bodyPresupuestos">
                        <div class="col">
                            <h2 class="text-center">Gestión de Presupuestos</h2>
                            <div class="row">
                                <div class="col mb-3">
                                    <button id="btnPresupuesto" class="btnCommon btn btn-primary w-100">
                                        <i class="fas fa-plus"></i> Asignar presupuesto
                                    </button>
                                </div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-md-6 mb-3">
                                    <label for="presupuestoTotal" title="Ingrese el presupuesto disponible">Presupuesto
                                        Disponible:</label>
                                    <input type="number" id="presupuestoTotal" class="form-control"
                                        placeholder="oooo.oo">
                                </div>
                                <div class="col-md-6">
                                    <label for="ahorroMensualPresupuesto">Ahorro Mensual:</label>
                                    <input type="number" id="ahorroMensualPresupuesto" class="form-control" readonly>
                                </div>
                            </div>
                            <div class="row mb-3">
                                <div class="col">
                                    <div class="table-responsive">
                                        <table
                                            class="table table-striped table-hover table-borderless table-secondary align-middle">
                                            <thead class="table-light">
                                                <tr>
                                                    <th>Acción</th>
                                                    <th>ID Proyecto</th>
                                                    <th>Nombre Proyecto</th>
                                                    <th>Monto total</th>
                                                    <th>Área</th>
                                                </tr>
                                            </thead>
                                            <tbody class="table-group-divider">
                                                <% if (presupuestos && presupuestos.length> 0) { %>
                                                    <% presupuestos.forEach(presupuesto=> { %>
                                                        <tr class="table-secondary presupuesto-row">
                                                            <td>
                                                                <a name="detallesPresupuesto"
                                                                    class="btn btn-success btn-sm"
                                                                    data-presupuesto-id="<%= presupuesto.idPresupuesto %>">
                                                                    <i class="fas fa-info-circle"></i> Detalles
                                                                </a>
                                                                <a name="editarPresupuesto"
                                                                    class="btn btn-primary btn-sm"
                                                                    data-presupuesto-id="<%= presupuesto.idPresupuesto %>">
                                                                    <i class="fas fa-pen"></i> Editar
                                                                </a>
                                                                <a name="eliminarPresupuesto"
                                                                    class="btn btn-danger btn-sm"
                                                                    data-presupuesto-id="<%= presupuesto.idPresupuesto %>">
                                                                    <i class="fas fa-trash"></i> Eliminar
                                                                </a>
                                                            </td>
                                                            <td class="idProyecto">
                                                                <%= presupuesto.idProyecto %>
                                                            </td>
                                                            <td class="nombreProyecto">
                                                                <%= presupuesto.Proyecto.nombreProyecto %>
                                                            </td>
                                                            <td class="montoTotal">
                                                                <%= presupuesto.montoTotal %>
                                                            </td>
                                                            <td>
                                                                <%= presupuesto.area %>
                                                            </td>
                                                        </tr>
                                                        <% }) %>
                                                            <% } else { %>
                                                                <tr>
                                                                    <td colspan="8" class="text-center">No hay
                                                                        presupuestos disponibles</td>
                                                                </tr>
                                                                <% } %>
                                                                    <tr>
                                                                        <td colspan="3">
                                                                            <div class="row">
                                                                                <div class="col-lg-8 col-xl-6 mx-auto">
                                                                                    <label for="sumaPresupuesto"
                                                                                        class="form-label">Suma
                                                                                        presupuestos:</label>
                                                                                    <input type="number"
                                                                                        id="sumaPresupuesto"
                                                                                        class="form-control form-control-lg"
                                                                                        readonly>
                                                                                </div>
                                                                            </div>
                                                                        </td>
                                                                    </tr>
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- Fin de presupuestos -->

                <!-- Gastos -->
                <div class="col-md-6">
                    <div id="bodyGastos">
                        <div class="col">
                            <h2 class="text-center">Gestión de Gastos</h2>
                            <div class="row">
                                <div class="col mb-3">
                                    <button id="btnGasto" class="btnCommon btn btn-primary w-100">
                                        <i class="fas fa-plus"></i> Definir gasto
                                    </button>
                                </div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-md-12 mb-3">
                                    <label for="presupuestoTotalMensualGasto">Presupuesto mensual restante:</label>
                                    <input type="number" id="presupuestoTotalMensualGasto" class="form-control"
                                        readonly>
                                </div>
                            </div>
                            <div class="row mb-3">
                                <div class="col">
                                    <div class="table-responsive">
                                        <table
                                            class="table table-striped table-hover table-borderless table-secondary align-middle">
                                            <thead class="table-light">
                                                <tr>
                                                    <th>Acción</th>
                                                    <th>ID Proyecto</th>
                                                    <th>Nombre Proyecto</th>
                                                    <th>Monto Gasto</th>
                                                    <th>Descripción</th>
                                                </tr>
                                            </thead>
                                            <tbody class="table-group-divider">
                                                <% if (gastos && gastos.length> 0) { %>
                                                    <% gastos.forEach(gasto=> { %>
                                                        <tr class="table-secondary gasto-row">
                                                            <td>
                                                                <a name="detallesGasto" class="btn btn-success btn-sm"
                                                                    data-gasto-id="<%= gasto.idGasto %>">
                                                                    <i class="fas fa-info-circle"></i> Detalles
                                                                </a>
                                                                <a name="editarGasto" class="btn btn-primary btn-sm"
                                                                    data-gasto-id="<%= gasto.idGasto %>">
                                                                    <i class="fas fa-pen"></i> Editar
                                                                </a>
                                                                <a name="eliminarGasto" class="btn btn-danger btn-sm"
                                                                    data-gasto-id="<%= gasto.idGasto %>">
                                                                    <i class="fas fa-trash"></i> Eliminar
                                                                </a>
                                                            </td>
                                                            <td class="idProyecto">
                                                                <%= gasto.idProyecto %>
                                                            </td>
                                                            <td class="nombreProyecto">
                                                                <%= gasto.Proyecto.nombreProyecto %>
                                                            </td>
                                                            <td class="montoTotalGasto">
                                                                <%= gasto.montoGasto %>
                                                            </td>
                                                            <td>
                                                                <%= gasto.descripcionGasto %>
                                                            </td>
                                                        </tr>
                                                        <% }) %>
                                                            <% } else { %>
                                                                <tr>
                                                                    <td colspan="8" class="text-center">No hay gastos
                                                                        disponibles</td>
                                                                </tr>
                                                                <% } %>
                                                                    <tr>
                                                                        <td colspan="3">
                                                                            <div class="row">
                                                                                <div class="col-lg-8 col-xl-6 mx-auto">
                                                                                    <label for="gastosTotales"
                                                                                        class="form-label">Gastos
                                                                                        totales:</label>
                                                                                    <input type="number"
                                                                                        id="gastosTotales"
                                                                                        class="form-control form-control-lg"
                                                                                        readonly>
                                                                                </div>
                                                                            </div>
                                                                        </td>
                                                                    </tr>
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- Fin de Gastos -->
            </div>
        </div>
    </main>
</body>
<footer>
    <%- include('partials/footer.ejs')%>
</footer>

</html>

<!-- Uso de sweetalert2 para las alertas (presupuesto agotado) -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.js"></script>

<script>

    //////////////////////////////////////// AHORRRO MENSUAL PRESUPUESTOS ////////////////////////////////////////

    ////////////// TOMAR EL VALOR DEL INPUT PRESUPUESTOTOTAL

    // Guardar el valor del input presupuestoTotal en localStorage
    function savePresupuestoTotal() {
        const presupuestoTotal = document.getElementById('presupuestoTotal').value;
        localStorage.setItem('presupuestoTotal', presupuestoTotal);
    }

    // Obtener el input y agregar un evento de cambio
    const inputPresupuestoTotal = document.getElementById('presupuestoTotal');
    inputPresupuestoTotal.addEventListener('change', savePresupuestoTotal);

    // Cargar el valor guardado al cargar la página
    window.addEventListener('load', () => {
        const savedPresupuestoTotal = localStorage.getItem('presupuestoTotal');
        if (savedPresupuestoTotal !== null) {
            document.getElementById('presupuestoTotal').value = savedPresupuestoTotal;
        }
    });

    ////////////// FIN DE TOMAR EL VALOR PRESUPUESTOTOTAL

    function ahorroMensualPresupuestos() {
        // Obtiene los valores de los inputs
        const presupuestoTotal = parseFloat(document.getElementById('presupuestoTotal').value) || 0;
        const sumaPresupuesto = parseFloat(document.getElementById('sumaPresupuesto').value) || 0;

        // Calcula el ahorro mensual
        const ahorroMensual = presupuestoTotal - sumaPresupuesto;

        // Actualiza el input con el id 'ahorroMensualPresupuesto' con el resultado del cálculo
        document.getElementById('ahorroMensualPresupuesto').value = ahorroMensual.toFixed(2);
    }

    // Llama a la función para que se ejecute al cargar la página
    document.addEventListener('DOMContentLoaded', () => {
        sumaPresupuestos();

        // Agrega un evento para recalcular el ahorro mensual cuando cambia el presupuesto total
        document.getElementById('presupuestoTotal').addEventListener('input', ahorroMensualPresupuestos);
    });

    /////////////////////////////////////// FIN AHORRRO MENSUAL PRESUPUESTOS //////////////////////////////////////
    function presupuestoAVencer() {
        const presupuestoRows = document.querySelectorAll(".presupuesto-row");
        const gastoRows = document.querySelectorAll(".gasto-row");
        const limiteProximidad = 0.9; // 90% del presupuesto

        // Agrupar los gastos por idProyecto
        const gastosPorProyecto = {};
        gastoRows.forEach(row => {
            const idProyectoElement = row.querySelector(".idProyecto");
            const montoGastoElement = row.querySelector(".montoTotalGasto");

            if (!idProyectoElement) {
                console.error("ID Proyecto element not found in gasto-row:", row);
                return;
            }
            if (!montoGastoElement) {
                console.error("Monto Total Gasto element not found in gasto-row:", row);
                return;
            }

            const idProyecto = idProyectoElement.innerText.trim();
            const montoGasto = parseFloat(montoGastoElement.innerText.trim()) || 0;

            if (!gastosPorProyecto[idProyecto]) {
                gastosPorProyecto[idProyecto] = 0;
            }
            gastosPorProyecto[idProyecto] += montoGasto;
        });

        // Comparar los gastos con los presupuestos
        presupuestoRows.forEach(row => {
            const idProyectoElement = row.querySelector(".idProyecto");
            const montoTotalElement = row.querySelector(".montoTotal");
            const nombreProyectoElement = row.querySelector(".nombreProyecto");

            if (!idProyectoElement) {
                console.error("ID Proyecto element not found in presupuesto-row:", row);
                return;
            }
            if (!montoTotalElement) {
                console.error("Monto Total element not found in presupuesto-row:", row);
                return;
            }
            if (!nombreProyectoElement) {
                console.error("Nombre proyecto element not found in presupuesto-row:", row);
                return;
            }

            const idProyecto = idProyectoElement.innerText.trim();
            const nombreProyecto = nombreProyectoElement.innerText.trim();
            const montoTotal = parseFloat(montoTotalElement.innerText.trim()) || 0;
            const sumaGastos = gastosPorProyecto[idProyecto] || 0;
            const porcentajeGasto = sumaGastos / montoTotal;

            if (porcentajeGasto >= limiteProximidad) {
                Swal.fire({
                    title: 'Presupuesto Próximo a Agotarse',
                    text: `El proyecto: ${nombreProyecto}, con ID: ${idProyecto}, tiene los gastos: (${sumaGastos}), que están próximos a agotar el presupuesto total (${montoTotal}). Actualmente ha gastado el ${Math.round(porcentajeGasto * 100)}% del presupuesto.`,
                    icon: 'warning',
                    confirmButtonText: 'Entendido'
                });
            }
        });
    }

    // Llama a la función para que se ejecute al cargar la página
    document.addEventListener('DOMContentLoaded', presupuestoAVencer);

    //////////////////////////////////////// SUMA PRESUPUESTOS ////////////////////////////////////////

    function sumaPresupuestos() {
        // Selecciona todas las celdas que contienen los montos totales
        const montosTotales = document.querySelectorAll('.montoTotal');

        // Suma los valores de esas celdas
        let suma = 0;
        montosTotales.forEach(celda => {
            suma += parseFloat(celda.textContent) || 0;
        });

        // Actualiza el input con el id 'sumaPresupuesto' con el resultado de la suma
        document.getElementById('sumaPresupuesto').value = suma.toFixed(2);
    }

    // Llama a la función para que se ejecute al cargar la página
    document.addEventListener('DOMContentLoaded', sumaPresupuestos);

    //////////////////////////////////////// FIN SUMA PRESUPUESTOS ////////////////////////////////////////

    ///////////////////////////////////////// SUMA GASTOS ///////////////////////////////////////////

    function sumaGastos() {
        // Selecciona todas las celdas que contienen los montos totales
        const montosTotalesGastos = document.querySelectorAll('.montoTotalGasto');

        // Suma los valores de esas celdas
        let suma = 0;
        montosTotalesGastos.forEach(celda => {
            suma += parseFloat(celda.textContent) || 0;
        });

        // Actualiza el input con el id 'gastosTotales' con el resultado de la suma
        document.getElementById('gastosTotales').value = suma.toFixed(2);
    }

    // Llama a la función para que se ejecute al cargar la página
    document.addEventListener('DOMContentLoaded', sumaGastos);

    //////////////////////////////////////// FIN SUMA GASTOS ///////////////////////////////////////////////


    //////////////////////////////////////// AHORRRO MENSUAL GASTOS ////////////////////////////////////////

    function presupuestoTotalMensualGasto() {
        // Obtiene los valores de los inputs
        const gastosTotales = parseFloat(document.getElementById('gastosTotales').value) || 0;
        const sumaPresupuesto = parseFloat(document.getElementById('sumaPresupuesto').value) || 0;

        // Calcula el ahorro mensual
        const ahorroMensual = sumaPresupuesto - gastosTotales;

        // Actualiza el input con el id 'presupuestoTotalMensualGasto' con el resultado del cálculo
        document.getElementById('presupuestoTotalMensualGasto').value = ahorroMensual.toFixed(2);
    }

    // Llama a la función para que se ejecute al cargar la página
    document.addEventListener('DOMContentLoaded', () => {
        presupuestoTotalMensualGasto();

        // Agrega un evento para recalcular el ahorro mensual cuando cambia el presupuesto total
        document.getElementById('presupuestoTotalMensualGasto').addEventListener('input', presupuestoTotalMensualGasto);
    });

    //////////////////////////////////////// FIN AHORRRO MENSUAL GASTOS ////////////////////////////////////////


    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////// GASTOS //////////////////////////////////////////////////////


    ////////////////////////////////////////////////////////
    /////////////////// CREATE /////////////////////////////
    document.getElementById('btnGasto').addEventListener('click', function () {
        const popup = window.open('', 'popup', `width=400,height=500,left=${(window.screen.width / 2) - (400 / 2)},top=${(window.screen.height / 2) - (500 / 2)}`);

        const formContent = `
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Agregar Gasto</title>
        <link rel="stylesheet" href="/css/main.css">
    </head>
    <body class="bodyPopup">
        <form id="gastoForm" class="popup-form" enctype="multipart/form-data" method="post" action="/gastos">
            <label for="idProyecto">Nombre del proyecto:</label><br>
            <select id="idProyecto" name="idProyecto" style="width: 200px; height: 30px;">
                <option value="">Seleccione un proyecto...</option>
            </select><br>

            <label for="descripcionGasto">Descripción del gasto:</label><br>
            <input type="text" id="descripcionGasto" name="descripcionGasto"><br>
        
            <label for="fechaGasto">Fecha del gasto:</label><br>
            <input type="date" id="fechaGasto" name="fechaGasto"><br>
        
            <label for="lugarGasto">Lugar del gasto:</label><br>
            <input type="text" id="lugarGasto" name="lugarGasto"><br>
        
            <label for="imagenGasto">Cargue su imagen:</label><br>
            <input type="file" id="imagenGasto" name="imagenGasto" accept="image/*"><br>
            
            <label for="montoGasto">Monto del gasto:</label><br>
            <input type="number" id="montoGasto" name="montoGasto"><br>
        
            <button class="btnPopup" type="submit">Guardar</button>
            <button class="btnPopup" type="button" onclick="window.close()">Cancelar</button>
        </form>
    </body>
    </html>
    `;
        popup.document.write(formContent);

        setTimeout(() => {
            cargarProyectosGastos(popup);

            popup.document.querySelector('form').addEventListener('submit', function (event) {
                event.preventDefault();
                btnPopupGuardarGasto(popup);
            });
        });
    });

    async function btnPopupGuardarGasto(popup) {
        const form = popup.document.getElementById('gastoForm');
        const formData = new FormData(form);

        if (!formData.get('idProyecto') || !formData.get('descripcionGasto') || !formData.get('fechaGasto') ||
            !formData.get('lugarGasto') || !formData.get('montoGasto') || !formData.get('imagenGasto')) {
            Swal.fire({
                title: 'Datos incompletos',
                text: 'Por favor complete todos los campos del formulario.',
                icon: 'warning',
                confirmButtonText: 'Entendido',
            });
            return;
        }

        const idProyecto = formData.get('idProyecto').toString();
        const montoGastoNuevo = parseFloat(formData.get('montoGasto'));

        const presupuestoExiste = verificarPresupuestoHTML(popup, idProyecto);
        if (!presupuestoExiste) {
            Swal.fire({
                title: 'Proyecto sin presupuesto',
                text: 'No existe un presupuesto asignado para el proyecto seleccionado.',
                icon: 'warning',
                confirmButtonText: 'Entendido',
            });
            return;
        }

        const presupuestoTotal = obtenerPresupuestoTotal(idProyecto);
        const gastosActuales = sumarGastosActuales(idProyecto);
        const gastosConNuevo = gastosActuales + montoGastoNuevo;

        if (gastosConNuevo > presupuestoTotal) {
            Swal.fire({
                title: 'Excede el presupuesto',
                text: 'El gasto ingresado excede el presupuesto disponible para este proyecto.',
                icon: 'warning',
                confirmButtonText: 'Entendido',
            });
            return;
        }

        try {
            const response = await fetch('/gastos', {
                method: 'POST',
                body: formData
            });

            const data = await response.json();
            if (data.mensaje === 'Gasto creado exitosamente') {
                popup.close();
                Swal.fire({
                    title: 'Gasto creado exitosamente',
                    text: `El gasto se ha registrado exitosamente`,
                    icon: 'success',
                    confirmButtonText: 'Entendido',
                }).then(() => {
                    window.location.reload();
                });
            } else {
                Swal.fire({
                    title: 'Error al guardar el registro',
                    text: 'No se ha podido completar el registro de gasto.',
                    icon: 'warning',
                    confirmButtonText: 'Entendido',
                });
            }
        } catch (error) {
            console.error('Error al realizar la solicitud:', error);
        }
    }

    function verificarPresupuestoHTML(popup, idProyecto) {
        const idsProyectos = document.querySelectorAll('.idProyecto');
        let presupuestoExiste = false;

        idsProyectos.forEach(celda => {
            if (celda.textContent.trim() === idProyecto) {
                presupuestoExiste = true;
            }
        });

        return presupuestoExiste;
    }

    function obtenerPresupuestoTotal(idProyecto) {
        const presupuestos = document.querySelectorAll('.presupuesto-row');
        let presupuestoTotal = 0;

        presupuestos.forEach(row => {
            if (row.querySelector('.idProyecto').textContent.trim() === idProyecto) {
                presupuestoTotal = parseFloat(row.querySelector('.montoTotal').textContent.trim());
            }
        });

        return presupuestoTotal;
    }

    function sumarGastosActuales(idProyecto) {
        const gastos = document.querySelectorAll('.gasto-row');
        let sumaGastos = 0;

        gastos.forEach(row => {
            if (row.querySelector('.idProyecto').textContent.trim() === idProyecto) {
                sumaGastos += parseFloat(row.querySelector('.montoTotalGasto').textContent.trim());
            }
        });

        return sumaGastos;
    }

    async function cargarProyectosGastos(popup) {
        try {
            const response = await fetch('/gastosProyecto');
            if (response.ok) {
                const proyectos = await response.json();
                const selectProyecto = popup.document.getElementById('idProyecto');

                proyectos.forEach(proyecto => {
                    const option = document.createElement('option');
                    option.value = proyecto.idProyecto;
                    option.textContent = proyecto.nombreProyecto;
                    selectProyecto.appendChild(option);
                });
            } else {
                console.error('Error al obtener los proyectos:', await response.text());
            }
        } catch (error) {
            console.error('Error al realizar la solicitud getProyectos:', error);
        }
    }


    ////////////////////////////////////////////////////////
    /////////////////// Read ///////////////////////////////

    // Ventana emergente para detalles de gasto
    document.querySelectorAll('[name="detallesGasto"]').forEach(btn => {
        btn.addEventListener('click', async function () {
            const idGasto = this.getAttribute('data-gasto-id');
            const response = await fetch(`/gastos/${idGasto}`, {
                method: 'GET',
                headers: { 'Content-Type': 'application/json' }
            });
            if (response.ok) {
                const gasto = await response.json();
                const imagenPath = gasto.imagen ? `${gasto.imagen}` : ''; // Asegurarse de que la ruta de la imagen es correcta
                console.log('Ruta de la imagen:', imagenPath); // Agregar console.log para verificar la ruta de la imagen

                var formContent = `
                <!DOCTYPE html>
                <html lang="en">
                <head>
                    <meta charset="UTF-8">
                    <meta name="viewport" content="width=device-width, initial-scale=1.0">
                    <title>Detalles de Gastos</title>
                    <link rel="stylesheet" href="/css/main.css">
                </head>
                <body class="bodyPopup">
                    <div class="popup-form">
                        <table>
                            <tr>
                                <td><strong>ID Gasto:</strong></td>
                                <td>${gasto.idGasto}</td>
                            </tr>
                            <tr>
                                <td><strong>ID Proyecto:</strong></td>
                                <td>${gasto.idProyecto}</td>
                            </tr>
                            <tr>
                                <td><strong>Descripción del gasto:</strong></td>
                                <td>${gasto.descripcionGasto}</td>
                            </tr>
                            <tr>
                                <td><strong>Lugar del gasto:</strong></td>
                                <td>${gasto.lugar}</td>
                            </tr>
                            <tr>
                                <td><strong>Monto del gasto:</strong></td>
                                <td>${gasto.montoGasto}</td>
                            </tr>
                            <tr>
                                <td><strong>Fecha del gasto:</strong></td>
                                <td>${new Date(gasto.fechaGasto).toLocaleDateString()}</td>
                            </tr>
                            <tr>
                                <td><strong>Imagen del gasto:</strong></td>
                                <td>
                                    ${imagenPath ? `<img src="${imagenPath}" alt="Imagen del gasto" style="max-width: 100%; height: auto;" />` : 'No hay imagen disponible'}
                                </td>
                            </tr>
                        </table>
                        <br>
                        <button class="btnPopup" type="button" onclick="window.close()">Cerrar</button>
                    </div>
                </body>
                </html>
            `;
                var popup = window.open('', 'popup', `width=600,height=650,left=${(window.screen.width / 2) - (400 / 2)},top=${(window.screen.height / 2) - (500 / 2)}`);
                popup.document.write(formContent);
            } else {
                console.error('Error al obtener los detalles del gasto:', await response.text());
            }
        });
    });


    ////////////////////////////////////////////////////////
    /////////////////// Update /////////////////////////////

    document.querySelectorAll('[name="editarGasto"]').forEach(btn => {
        btn.addEventListener('click', async function () {
            const idGasto = this.getAttribute('data-gasto-id');
            const response = await fetch(`/gastos/${idGasto}`, {
                method: 'GET',
                headers: { 'Content-Type': 'application/json' }
            });
            if (response.ok) {
                const gasto = await response.json();

                // Obtener los proyectos disponibles
                const proyectosResponse = await fetch('/gastosProyecto');
                if (!proyectosResponse.ok) {
                    console.error('Error al obtener los proyectos:', await proyectosResponse.text());
                    return;
                }
                const proyectos = await proyectosResponse.json();

                // Construir las opciones del select de proyectos
                const selectProyecto = document.createElement('select');
                selectProyecto.setAttribute('id', 'idProyecto');
                selectProyecto.setAttribute('name', 'idProyecto');
                selectProyecto.style.width = '200px';
                selectProyecto.style.height = '30px';
                selectProyecto.innerHTML = '<option value="">Seleccione un proyecto...</option>';
                proyectos.forEach(proyecto => {
                    const option = document.createElement('option');
                    option.value = proyecto.idProyecto;
                    option.textContent = proyecto.nombreProyecto;
                    if (gasto.idProyecto === proyecto.idProyecto) {
                        option.selected = true; // Seleccionar el proyecto correspondiente al gasto
                    }
                    selectProyecto.appendChild(option);
                });

                const formContent = `
                <!DOCTYPE html>
                <html lang="en">
                <head>
                    <meta charset="UTF-8">
                    <meta name="viewport" content="width=device-width, initial-scale=1.0">
                    <title>Actualizar gasto</title>
                    <link rel="stylesheet" href="/css/main.css">
                </head>
                <body class="bodyPopup">
                    <form class="popup-form" enctype="multipart/form-data">
                        <label for="idProyecto">Nombre del proyecto:</label><br>
                        ${selectProyecto.outerHTML}<br>
                        <label for="descripcionGasto">Descripción del gasto:</label><br>
                        <input type="text" id="descripcionGasto" name="descripcionGasto" value="${gasto.descripcionGasto}" required><br>
                        <label for="lugar">Lugar del gasto:</label><br>
                        <textarea id="lugar" name="lugar">${gasto.lugar}</textarea><br>
                        <label for="montoGasto">Monto del gasto:</label><br>
                        <input type="number" id="montoGasto" name="montoGasto" value="${gasto.montoGasto}"><br>
                        <label for="fechaGasto">Fecha del Gasto:</label><br>
                        <input type="date" id="fechaGasto" name="fechaGasto" value="${gasto.fechaGasto}"><br>
                        <label for="imagenGasto">Imagen del gasto:</label><br>
                        <input type="file" id="imagenGasto" name="imagenGasto" value="${gasto.imagenGasto}" accept="image/*" required><br>

                        <button class="btnPopup" type="submit">Guardar</button>
                        <button class="btnPopup" type="button" onclick="window.close()">Cancelar</button>
                    </form>
                </body>
                </html>
            `;

                const popup = window.open('', 'popup', `width=400,height=600,left=${(window.screen.width / 2) - (400 / 2)},top=${(window.screen.height / 2) - (500 / 2)}`);
                popup.document.write(formContent);

                popup.document.querySelector('form').addEventListener('submit', function (event) {
                    event.preventDefault();

                    // Obtener el nuevo valor de montoGasto
                    const nuevoMontoGasto = parseFloat(popup.document.getElementById('montoGasto').value);

                    // Obtener la suma de todos los gastos actuales y el presupuesto
                    let sumaMontoGastos = 0;
                    document.querySelectorAll('.montoTotalGasto').forEach(td => {
                        sumaMontoGastos += parseFloat(td.textContent);
                    });

                    const montoTotalPresupuesto = parseFloat(document.querySelector('.montoTotal').textContent);

                    // Validar si la nueva suma de los montos de gastos supera el monto total del presupuesto
                    const sumaTotalGastos = sumaMontoGastos + nuevoMontoGasto - gasto.montoGasto;
                    if (sumaTotalGastos > montoTotalPresupuesto) {
                        Swal.fire({
                            title: 'Monto excede presupuesto',
                            text: 'La suma de los montos de gastos supera el monto total del presupuesto asignado.',
                            icon: 'error',
                            confirmButtonText: 'Entendido'
                        });
                        return;
                    }

                    // Llamar a la función para actualizar el gasto
                    btnPopupActualizarGasto(idGasto, popup);
                });
            } else {
                console.error('Error al obtener el gasto:', await response.text());
            }
        });
    });

    async function btnPopupActualizarGasto(idGasto, popup) {
        const form = popup.document.querySelector('form');
        const formData = new FormData(form);

        // Validar que todos los campos obligatorios estén completos
        if (!form.checkValidity()) {
            // Mostrar mensaje de error utilizando SweetAlert
            Swal.fire({
                title: 'Campos incompletos',
                text: 'Por favor complete todos los campos antes de guardar.',
                icon: 'error',
                confirmButtonText: 'Entendido'
            });
            return;
        }

        try {
            const response = await fetch(`/gastos/${idGasto}`, {
                method: 'PUT',
                body: formData
            });

            const data = await response.json();

            if (response.ok && data.mensaje === 'Gasto actualizado exitosamente') {
                popup.close();
                Swal.fire({
                    title: 'Gasto modificado exitosamente',
                    text: 'El gasto se ha actualizado exitosamente',
                    icon: 'success',
                    confirmButtonText: 'Entendido'
                }).then(() => {
                    window.location.reload();
                });
            } else {
                Swal.fire({
                    title: 'Error al guardar el registro',
                    text: 'No se ha podido completar la actualización del registro de gasto.',
                    icon: 'warning',
                    confirmButtonText: 'Entendido',
                });
            }
        } catch (error) {
            console.error('Error al realizar la solicitud:', error);
            Swal.fire({
                title: 'Error al guardar el registro',
                text: 'No se ha podido completar la actualización del registro de gasto.',
                icon: 'warning',
                confirmButtonText: 'Entendido',
            });
        }
    }


    ////////////////////////////////////////////////////////
    /////////////////// Delete /////////////////////////////

    // Manejador de clic para el botón de eliminar
    document.querySelectorAll('[name="eliminarGasto"]').forEach(btn => {
        btn.addEventListener('click', async function () {
            const idGasto = this.getAttribute('data-gasto-id');
            // Usar Swal para la confirmación
            const result = await Swal.fire({
                title: '¿Estás seguro?',
                text: '¿Estás seguro de que quieres eliminar este registro de gasto?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Sí, eliminar',
                cancelButtonText: 'Cancelar'
            });

            if (result.isConfirmed) {
                const response = await fetch(`/gastos/${idGasto}`, {
                    method: 'DELETE',
                    headers: { 'Content-Type': 'application/json' }
                });
                const data = await response.json();
                // Aquí se muestra un mensaje de éxito
                //console.log(data);
                Swal.fire({
                    title: 'Se ha elimnado el registro',
                    text: 'Se ha eliminado el registro de gasto de manera exitosa.',
                    icon: 'success',
                    confirmButtonText: 'Entendido',
                }).then(() => {
                    // Esta línea se ejecutará cuando el usuario presione "Entendido"
                    window.location.reload();// Recargar la página después de eliminar el usuario
                });
            }
        });
    });

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////// PRESUPUESTO ////////////////////////////////////////////////////


    ////////////////////////////////////////////////////////
    /////////////////// CREATE /////////////////////////////

    async function cargarProyectosPresupuestos() {
        try {
            const response = await fetch('/presupuestosProyecto');
            if (response.ok) {
                const proyectos = await response.json();
                const selectProyecto = popup.document.getElementById('idProyecto');

                proyectos.forEach(proyecto => {
                    const option = document.createElement('option');
                    option.value = proyecto.idProyecto;
                    option.textContent = proyecto.nombreProyecto;
                    selectProyecto.appendChild(option);
                });
            } else {
                console.error('Error al obtener los proyectos:', await response.text());
            }
        } catch (error) {
            console.error('Error al realizar la solicitud getProyectos:', error);
        }
    }

    var popup;

    var btnPresupuesto = document.getElementById('btnPresupuesto').addEventListener('click', function () {
        popup = window.open('', 'popup', `width=400,height=500,left=${(window.screen.width / 2) - (400 / 2)},top=${(window.screen.height / 2) - (500 / 2)}`);
        //'width=400,height=500');

        var formContent = `
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Agregar Presupuesto</title>
            <link rel="stylesheet" href="/css/main.css">
        </head>
        <body class="bodyPopup">
            <form class="popup-form">
                <label for="idProyecto">Nombre del proyecto:</label><br>
                <select id="idProyecto" name="idProyecto" style="width: 200px; height: 30px;">
                    <option value="">Seleccione un proyecto...</option>
                </select><br>

                <label for="montoTotal">Monto del presupuesto:</label><br>
                <input type="number" id="montoTotal" name="montoTotal"><br>
            
                <label for="saldoPendiente">Saldo del presupuesto:</label><br>
                <input type="number" id="saldoPendiente" name="fechaGasto"><br>
            
                <label for="area">Área o Departamento:</label><br>
                <input type="text" id="area" name="area"><br>
            
                <label for="fechaMonto">Fecha del presupuesto:</label><br>
                <input type="date" id="fechaMonto" name="fechaMonto" accept="image/*"><br>
            
                <label for="descripcion">Descripción del presupuesto:</label><br>
                <textarea id="descripcion" name="descripcion"></textarea><br>

                <button class="btnPopup" type="submit">Guardar</button>
                <button class="btnPopup" type="button" onclick="window.close()">Cancelar</button>
            </form>
        </body>
        </html>
    `;

        popup.document.write(formContent);

        setTimeout(() => {
            cargarProyectosPresupuestos();

            popup.document.querySelector('form').addEventListener('submit', function (event) {
                event.preventDefault();
                btnPopupGuardarPresupuesto();
            });
        }, 100);
    });

    async function btnPopupGuardarPresupuesto() {
        var idProyecto = popup.document.getElementById('idProyecto').value;
        var montoTotal = popup.document.getElementById('montoTotal').value;
        var saldoPendiente = popup.document.getElementById('saldoPendiente').value;
        var area = popup.document.getElementById('area').value;
        var fechaMonto = new Date(popup.document.getElementById('fechaMonto').value);
        var descripcion = popup.document.getElementById('descripcion').value;

        // Verificar si todos los campos están completos
        if (!idProyecto || !montoTotal || !saldoPendiente || !area || !fechaMonto || !descripcion) {
            Swal.fire({
                title: 'Datos incompletos',
                text: 'Por favor complete todos los campos del formulario.',
                icon: 'warning',
                confirmButtonText: 'Entendido',
            });
            return; // Detener la ejecución de la función si los campos están incompletos
        }

        var nuevoPresupuesto = {
            idProyecto: idProyecto,
            montoTotal: montoTotal,
            saldoPendiente: saldoPendiente,
            area: area,
            fechaMonto: fechaMonto,
            descripcion: descripcion
        };

        fetch('/presupuestos', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(nuevoPresupuesto)
        })
            .then(response => response.json())
            .then(data => {
                if (data.mensaje === 'Presupuesto creado exitosamente') {
                    popup.close();
                    Swal.fire({
                        title: 'Presupuesto creado exitosamente',
                        text: 'El presupuesto se ha registrado exitosamente',
                        icon: 'success',
                        confirmButtonText: 'Entendido',
                    }).then(() => {
                        // Esta línea se ejecutará cuando el usuario presione "Entendido"
                        window.location.reload();
                    });
                } else {
                    //console.error('Error al guardar el nuevo presupuesto:', data);
                    Swal.fire({
                        title: 'Error al guardar el nuevo presupuesto',
                        text: 'Error al crear el registro del nuevo presupuesto',
                        icon: 'success',
                        confirmButtonText: 'Entendido'
                    })
                }
            })
            .catch(error => {
                console.error('Error al realizar la solicitud:', error);
            });
    }

    ////////////////////////////////////////////////////////
    /////////////////// Read ///////////////////////////////

    // Ventana emergente para detalles de gasto
    document.querySelectorAll('[name="detallesPresupuesto"]').forEach(btn => {
        btn.addEventListener('click', async function () {
            const idPresupuesto = this.getAttribute('data-presupuesto-id');
            const response = await fetch(`/presupuestos/${idPresupuesto}`, {
                method: 'GET',
                headers: { 'Content-Type': 'application/json' }
            });
            if (response.ok) {
                const presupuesto = await response.json();
                var formContent = `
            <!DOCTYPE html>
            <html lang="en">
            <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Detalles de presupuesto</title>
              <link rel="stylesheet" href="/css/main.css">
            </head>
            <body class="bodyPopup">
              <div class="popup-form">
                <p ><strong>ID Presupuesto:</strong> ${presupuesto.idPresupuesto}</p>
                <p ><strong>ID Proyecto:</strong> ${presupuesto.idProyecto}</p>
                <p ><strong>Monto del presupuesto:</strong> ${presupuesto.montoTotal}</p>
                <p ><strong>Saldo del presupuesto:</strong> ${presupuesto.saldoPendiente}</p>
                <p ><strong>Área o departamento:</strong> ${presupuesto.area}</p>
                <p ><strong>Fecha del presupuesto:</strong> ${presupuesto.fechaMonto}</p>
                <p ><strong>Descripción del presupuesto:</strong> ${presupuesto.descripcion}</p>
                <button class="btnPopup" type="button" onclick="window.close()">Cerrar</button>
              </div>
            </body>
            </html>
          `;
                var popup = window.open('', 'popup', `width=400,height=500,left=${(window.screen.width / 2) - (400 / 2)},top=${(window.screen.height / 2) - (500 / 2)}`);
                //'width=400,height=500');
                popup.document.write(formContent);
            } else {
                console.error('Error al obtener los detalles del presupuesto:', await response.text());
            }
        });
    });

    ////////////////////////////////////////////////////////
    /////////////////// Update /////////////////////////////

    // Ventana emergente para editar un proyecto
    document.querySelectorAll('[name="editarPresupuesto"]').forEach(btn => {
        btn.addEventListener('click', async function () {
            const idPresupuesto = this.getAttribute('data-presupuesto-id');
            const response = await fetch(`/presupuestos/${idPresupuesto}`, {
                method: 'GET',
                headers: { 'Content-Type': 'application/json' }
            });
            if (response.ok) {
                const presupuesto = await response.json();

                // Obtener los proyectos disponibles
                const proyectosResponse = await fetch('/presupuestosProyecto');
                if (!proyectosResponse.ok) {
                    console.error('Error al obtener los proyectos:', await proyectosResponse.text());
                    return;
                }
                const proyectos = await proyectosResponse.json();

                // Construir las opciones del select de proyectos
                const selectProyecto = document.createElement('select');
                selectProyecto.setAttribute('id', 'idProyecto');
                selectProyecto.setAttribute('name', 'idProyecto');
                selectProyecto.style.width = '200px';
                selectProyecto.style.height = '30px';
                selectProyecto.innerHTML = '<option value="">Seleccione un proyecto...</option>';
                proyectos.forEach(proyecto => {
                    const option = document.createElement('option');
                    option.value = proyecto.idProyecto;
                    option.textContent = proyecto.nombreProyecto;
                    if (presupuesto.idProyecto === proyecto.idProyecto) {
                        option.selected = true; // Seleccionar el proyecto correspondiente al proyecto
                    }
                    selectProyecto.appendChild(option);
                });

                const formContent = `
                <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Actualizar presupuesto</title>
            <link rel="stylesheet" href="/css/main.css">
        </head>
        <body class="bodyPopup">
            <form class="popup-form">
                <label for="idProyecto">Nombre del proyecto:</label><br>
                ${selectProyecto.outerHTML}<br>
                <label for="montoTotal">Monto del presupuesto:</label><br>
                <textarea type="number" id="montoTotal" name="montoTotal">${presupuesto.montoTotal}</textarea><br>
                <label for="saldoPendiente">Saldo del presupuesto:</label><br>
                <textarea type="number" id="saldoPendiente" name="saldoPendiente">${presupuesto.saldoPendiente}</textarea><br>
                <label for="area">Área o departamento:</label><br>
                <textarea id="area" name="area">${presupuesto.area}</textarea><br>
                <label for="fechaMonto">Fecha del Gasto:</label><br>
                <input type="date" id="fechaMonto" name="fechaMonto" value="${presupuesto.fechaMonto}"><br>
                <label for="descripcion">Descripción del presupuesto:</label><br>
                <input type="text" id="descripcion" name="descripcion" value="${presupuesto.descripcion}" required><br>
                <button class="btnPopup" type="submit">Guardar</button>
                <button class="btnPopup" type="button" onclick="window.close()">Cancelar</button>
            </form>
        </body>
        </html>
`;

                const popup = window.open('', 'popup', `width=400,height=600,left=${(window.screen.width / 2) - (400 / 2)},top=${(window.screen.height / 2) - (500 / 2)}`);
                //'width=400,height=600');
                popup.document.write(formContent);
                popup.document.querySelector('form').addEventListener('submit', function (event) {
                    event.preventDefault();
                    btnPopupActualizarPresupuesto(idPresupuesto, popup);
                });
            } else {
                console.error('Error al actualizar el presupuesto:', await response.text());
            }
        });
    });

    function btnPopupActualizarPresupuesto(idPresupuesto, popup) {
        const idProyecto = popup.document.getElementById('idProyecto').value;
        const montoTotal = popup.document.getElementById('montoTotal').value;
        const saldoPendiente = popup.document.getElementById('saldoPendiente').value;
        const area = popup.document.getElementById('area').value;
        const fechaMonto = new Date(popup.document.getElementById('fechaMonto').value);
        const descripcion = popup.document.getElementById('descripcion').value;

        // Verificar si todos los campos están completos
        if (!idProyecto || !montoTotal || !saldoPendiente || !area || !fechaMonto || !descripcion) {
            Swal.fire({
                title: 'Datos incompletos',
                text: 'Por favor complete todos los campos del formulario.',
                icon: 'warning',
                confirmButtonText: 'Entendido',
            });
            return; // Detener la ejecución de la función si los campos están incompletos
        }

        const presupuestoActualizado = {
            idProyecto: idProyecto,
            montoTotal: montoTotal,
            saldoPendiente: saldoPendiente,
            area: area,
            fechaMonto: fechaMonto,
            descripcion: descripcion
        };

        fetch(`/presupuestos/${idPresupuesto}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(presupuestoActualizado)
        })
            .then(response => response.json())
            .then(data => {
                if (data.mensaje === 'Presupuesto actualizado exitosamente') {
                    popup.close();
                    Swal.fire({
                        title: 'Presupuesto modificado exitosamente',
                        text: `El presupuesto se ha actualizado exitosamente`,
                        icon: 'success',
                        confirmButtonText: 'Entendido'
                    }).then(() => {
                        // Esta línea se ejecutará cuando el usuario presione "Entendido"
                        window.location.reload();
                    });
                } else {
                    //console.error('Error al actualizar el gasto:', data);
                    Swal.fire({
                        title: 'Error al actualizar el presupuesto',
                        text: 'No se ha podido completar la actualización del registro de presupuesto.',
                        icon: 'warning',
                        confirmButtonText: 'Entendido',
                    });
                }
            })
            .catch(error => {
                console.error('Error al realizar la solicitud:', error);
            });
    }

    ////////////////////////////////////////////////////////
    /////////////////// Delete /////////////////////////////

    // Manejador de clic para el botón de eliminar
    document.querySelectorAll('[name="eliminarPresupuesto"]').forEach(btn => {
        btn.addEventListener('click', async function () {
            const idPresupuesto = this.getAttribute('data-presupuesto-id');

            // Usar Swal para la confirmación
            const result = await Swal.fire({
                title: '¿Estás seguro?',
                text: '¿Estás seguro de que quieres eliminar este registro de presupuesto?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Sí, eliminar',
                cancelButtonText: 'Cancelar'
            });

            if (result.isConfirmed) {
                const response = await fetch(`/presupuestos/${idPresupuesto}`, {
                    method: 'DELETE',
                    headers: { 'Content-Type': 'application/json' }
                });
                const data = await response.json();
                // Aquí se muestra un mensaje de éxito
                //console.log(data);
                Swal.fire({
                    title: 'Se ha elimnado el registro',
                    text: 'Se ha eliminado el registro de presupuesto de manera exitosa.',
                    icon: 'success',
                    confirmButtonText: 'Entendido',
                }).then(() => {
                    // Esta línea se ejecutará cuando el usuario presione "Entendido"
                    window.location.reload();// Recargar la página después de eliminar el usuario
                });
            }
        });
    });
</script>